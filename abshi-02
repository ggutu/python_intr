python in built functions when ever you write programing are there in built functions (liberaries)
eg string.splt("')
python have in built for for loop,numeric,string sequence ,python has inbuilt function.
always lear writing python in built functions
===============
text = "Python is awesome"
words = text.split()
print("Words:", words)

my job to take arn (amazon resource name)
arn 's use er name 
python 
=============
arn= "aws:iam::123456789012:user/johndoe"
print(arn.split("/")[1])
==================================output  johndoe give arn and print username
Local Scope: Variables defined within a function have local scope and are only accessible inside that function.[c]
Global Scope: Variables defined outside of any function have global scope and can be accessed throughout the entire code.[a,b]
a = 2
b = 4
def addition():
    c = 5
    print(a + b  + c)
def sub():
    print(a - b)
sub()--------------2
addition()--------------11
=================================
Naming convention variable always important, define variable in lower case
1.lower case
eg name "Gutu
   Name "Hawi"
print(name)
print(Name) XXXXXXX wrong 
2. ec2instance not best practice
ec2_instance   
3. name as full descriptive 
============================
when you write code using function
1.readability 
2.reusability(modularity)
3.debugging
advantage 
def nameOfFunction():
    1
    2
    3
    print()
nameOffFunction()
eg Devops  creat s3 and Ec2
def s3():
     --
     --
def ec2():
     --
     --
or use  create jira ticket
=============================
modules ---modular approach ---if you write piece code project 1 can be used this piece code used project 2 3 4
by writing one python file we can use 
eg jira ---Get jira 
advantage module is Reusability
module is group of function 
---
can i use entire module as it is ? yes here is the example to call advance_calc
import advance_calc as basic_cal
basic_cal

can i use part of module  ? yes here is the example to call advance_call only addition part from calculoter
eg
import advance_calc as basic_cal
basic_cal.add()
return  calculater
==============
def addition(num1,num2):
    a= num1 + num2
    return a
print(addition(5,90))
def sub(num1,num2):
    s = num1 - num2
    return s
print(sub(10,7))
def mul(num1,num2):  #defination
    m = num1*num2    #input 
    return m         # return
print(mul(8,5))

# Function 
# input
# return output
#       input
#       perform the the operation
#       return the output
